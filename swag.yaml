openapi: 3.0.0
info:
  title: 'Бекенд Venari'
  contact:
    email: kupryashin.stepan@yandex.ru
  version: 3.0.0
servers:
  -
    url: 'https://venari.backend.rfld.ru'
    description: 'Боевой сервер'
paths:
  /api/register:
    get:
      tags:
        - UserController
      summary: 'Метод регистрации'
      operationId: c491d067c8de8d0e0a4cc77bb7d7b363
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUser'
  /api/posts:
    get:
      tags:
        - PostController
      summary: 'Метод получения всех постов'
      operationId: 73071356cdd139f116db7436d9da6497
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPosts'
  /api/posts/:
    get:
      tags:
        - PostController
      summary: 'Метод получения поста по его id (подробная страница)'
      operationId: ca959cc7c6472d1743b8dc2e4e26a224
      parameters:
        -
          name: id
          in: query
          description: 'id поста'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPostByID'
  /api/vacancies:
    get:
      tags:
        - VacancyController
      summary: 'Метод получения всех вакансий'
      operationId: a75f8d08e0e49f2a76fffdbf7a64b395
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVacancies'
components:
  schemas:
    registerUser:
      properties:
        success:
          type: boolean
          example: 'true'
        user:
          $ref: '#/components/schemas/user'
        access_token:
          type: string
      type: object
    getPosts:
      properties:
        success:
          type: boolean
          example: 'true'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/post'
      type: object
    getPostByID:
      properties:
        success:
          type: boolean
          example: 'true'
        post:
          $ref: '#/components/schemas/post'
      type: object
    getVacancies:
      properties:
        success:
          type: boolean
          example: 'true'
        vacancies:
          type: array
          items:
            $ref: '#/components/schemas/vacancy'
      type: object
    vacancy:
      properties:
        department_id:
          type: integer
        position:
          $ref: '#/components/schemas/position'
        description:
          type: string
        salary:
          type: string
        is_online:
          type: boolean
        has_social_support:
          type: boolean
        schedule:
          type: string
        is_flexible:
          type: boolean
        link_to_test_document:
          type: string
        is_fulltime:
          type: boolean
        city_id:
          type: integer
        is_closed:
          type: boolean
        is_outer:
          type: boolean
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    position:
      properties:
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    sources:
      type: string
      enum:
        - venari
        - habr
    post:
      properties:
        title:
          type: string
        text:
          type: string
        user:
          $ref: '#/components/schemas/user'
        attributes:
          $ref: '#/components/schemas/attributes'
        likes:
          type: integer
        description:
          type: string
        source:
          $ref: '#/components/schemas/sources'
        user_name:
          type: string
        source_url:
          type: string
          format: url
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    attributes: {  }
    user: {  }
externalDocs:
  description: 'Как документировать этот код'
  url: 'https://zircote.github.io/swagger-php/guide/annotations.html'
