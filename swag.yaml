openapi: 3.0.0
info:
  title: 'Бекенд Venari'
  contact:
    email: kupryashin.stepan@yandex.ru
  version: 3.0.0
servers:
  -
    url: 'https://venari.backend.rfld.ru'
    description: 'Боевой сервер'
  -
    url: 'http://127.0.0.1:8000'
    description: dev
paths:
  /api/register:
    post:
      tags:
        - UserController
      summary: 'Метод регистрации'
      operationId: 482fd8cbb98dc3225fa0e7ac40c1abe6
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequest'
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUser'
  /api/login:
    post:
      tags:
        - UserController
      summary: 'метод авторизации пользователя. возвращает токен'
      operationId: afd167661891a2c4c1b49a04643b9223
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginUser'
  /api/networking/:
    get:
      tags:
        - СhatController
      summary: 'Метод получения всех чатов (страница нетворкинг)'
      operationId: b8f0e7be13bb3f689586654c9699af0d
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllChats'
  '/api/networking/{chat_id}/messages':
    get:
      tags:
        - СhatController
      summary: 'Метод получения сообщений чата по id чата'
      operationId: 44f858925d585bc9ba9261ad1cf84a3f
      parameters:
        -
          name: chat_id
          in: path
          description: 'id чата'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChatMessagesByChatID'
  '/api/networking/{chat_id}':
    get:
      tags:
        - СhatController
      summary: 'Метод получения подробной информации о чате по id'
      operationId: 5a457c7cfd6308a8fc2e82ec59d696a8
      parameters:
        -
          name: chat_id
          in: path
          description: 'id чата'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChatDetail'
  /api/comments/send-comment:
    post:
      tags:
        - CommentController
      summary: 'Метод отправки комментария'
      operationId: e0fb87a1130be57faf66f1ca0405bdb8
      requestBody:
        $ref: '#/components/requestBodies/SendCommentRequest'
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendComment'
  '/api/posts/{id}/comments':
    get:
      tags:
        - CommentController
      summary: 'Метод получения всех комментариев поста'
      operationId: da850347cec64e7a5d304db8fc79e6ad
      parameters:
        -
          name: id
          in: path
          description: 'id поста'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getComments'
  '/api/files/{id}':
    get:
      tags:
        - FileController
      summary: 'Метод получения файла по его id'
      operationId: fdbc4480f2c1bcd3cf1eb5e570955243
      parameters:
        -
          name: id
          in: path
          description: 'id файла'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
  /api/hr-panel/filters:
    get:
      tags:
        - HR-panel
      summary: 'Метод получения всех доступных фильтров'
      operationId: 1c89f0c3eaf81d35d338d0b4bf9e0ac0
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllFilters'
  '/api/images/{id}':
    get:
      tags:
        - ImageController
      summary: 'Метод получения изображения по его id'
      operationId: e548787fe1e043626c156a73136a459e
      parameters:
        -
          name: id
          in: path
          description: 'id изображения'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
  /api/messages:
    get:
      tags:
        - MessageController
      summary: "Метод получения всех чатов пользователя. Отсортированы в обратном порядке по времени последнего сообщения\n(самый поздний - первый)"
      operationId: b7712de7ca6db35b0b2202a5b7bdff7a
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChats'
  '/api/messages/{user_id}':
    get:
      tags:
        - MessageController
      summary: 'Метод получения сообщений 1-1 по id пользователя'
      operationId: 93692c2c6643a27380a2798c8130dce9
      parameters:
        -
          name: user_id
          in: path
          description: 'id пользователя'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMessagesByUserID'
  '/api/messages/companies/{company_chat_id}':
    get:
      tags:
        - MessageController
      summary: 'Метод получения всех сообщений с компанией по id компани-чата'
      operationId: 34b26691d145d076bcd0934a5052ddfc
      parameters:
        -
          name: company_chat_id
          in: path
          description: 'id компани-чата'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCompanyMessagesByCompanyChatID'
  /api/messages/send-message:
    post:
      tags:
        - MessageController
      summary: 'Метод отправки сообщений'
      operationId: 4bd87a3a7705f49799ee91b062338872
      requestBody:
        $ref: '#/components/requestBodies/SendMessageRequest'
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendMessage'
  /api/messages/join-chat:
    post:
      tags:
        - MessageController
      summary: 'Метод вступления в чат'
      operationId: 6316f6dc3962c016667f2927535a8bdb
      requestBody:
        $ref: '#/components/requestBodies/JoinChatRequest'
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/joinChat'
  /api/messages/quit-chat:
    post:
      tags:
        - MessageController
      summary: 'Метод покидания чата'
      operationId: 40a2f6ee23b76dd0c224b9c7be580607
      requestBody:
        $ref: '#/components/requestBodies/JoinChatRequest'
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/joinChat'
  /api/posts:
    get:
      tags:
        - PostController
      summary: 'Метод получения всех постов'
      operationId: 73071356cdd139f116db7436d9da6497
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPosts'
  '/api/posts/{id}':
    get:
      tags:
        - PostController
      summary: 'Метод получения поста по его id (подробная страница)'
      operationId: 575616ce88c4119bb7a6c703f83cb6ee
      parameters:
        -
          name: id
          in: path
          description: 'id поста'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPostByID'
  /api/vacancies:
    get:
      tags:
        - VacancyController
      summary: 'Метод получения всех вакансий'
      operationId: a75f8d08e0e49f2a76fffdbf7a64b395
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVacancies'
  '/api/vacancies/{id}':
    get:
      tags:
        - VacancyController
      summary: 'Метод получения подробной информации о вакансии по id'
      operationId: eaa6d5b5a84d934bfc97c0df706eddd2
      parameters:
        -
          name: id
          in: path
          description: 'id вакансии'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVacancyByID'
  /api/hr-panel/vacancies:
    get:
      tags:
        - HR-panel
      summary: 'Метод получения всех вакансий для hr-панели'
      operationId: e24dc7fc37a99169a9fb384c9a0021a0
      parameters:
        -
          name: status_id
          in: query
          description: 'id статуса (открыта, черновик, архив)'
          required: false
        -
          name: specialization_id
          in: query
          description: 'id специализации'
          required: false
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVacanciesHR'
components:
  schemas:
    attachmentDTO:
      properties:
        text:
          type: string
          nullable: true
        file:
          type: string
        image:
          type: string
        link:
          type: string
          nullable: true
      type: object
    messageDTO:
      properties:
        id:
          type: integer
        owner_id:
          type: integer
        to_id:
          description: 'либо id пользователя, либо id чата, либо id чата компании'
          type: string
        owner:
          $ref: '#/components/schemas/detailUser'
        attachmentDTO:
          $ref: '#/components/schemas/attachmentDTO'
        created_at:
          type: string
          format: date
      type: object
    messageType:
      type: string
      enum:
        - message
        - chatMessage
        - companyMessage
    registerUser:
      properties:
        success:
          type: boolean
          example: 'true'
        user:
          $ref: '#/components/schemas/user'
        access_token:
          type: string
      type: object
    loginUser:
      properties:
        success:
          type: boolean
          example: 'true'
        user:
          $ref: '#/components/schemas/user'
        token:
          type: string
      type: object
    getAllChats:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/chat'
      type: object
    getChatMessagesByChatID:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/messageDTO'
      type: object
    getChatDetail:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/chat'
      type: object
    sendComment:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/comment'
      type: object
    getComments:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/detailComment'
      type: object
    getAllFilters:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/filter'
      type: object
    getChats:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/previewChat'
      type: object
    getMessagesByUserID:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/messageDTO'
      type: object
    getCompanyMessagesByCompanyChatID:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/messageDTO'
      type: object
    sendMessage:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/messageDTO'
      type: object
    joinChat:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/chat'
      type: object
    quitChat:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/chat'
      type: object
    getPosts:
      properties:
        success:
          type: boolean
          example: 'true'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/post'
      type: object
    getPostByID:
      properties:
        success:
          type: boolean
          example: 'true'
        post:
          $ref: '#/components/schemas/post'
      type: object
    getVacancies:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/vacancy'
      type: object
    getVacancyByID:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/detailVacancy'
      type: object
    getVacanciesHR:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/detailVacancy'
      type: object
    vacancy:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        department:
          $ref: '#/components/schemas/department'
        position:
          $ref: '#/components/schemas/position'
        description:
          type: string
        is_online:
          type: boolean
        has_social_support:
          type: boolean
        schedule:
          type: string
        is_flexible:
          type: boolean
        link_to_test_document:
          type: string
        city:
          $ref: '#/components/schemas/city'
        is_closed:
          type: boolean
        is_outer:
          type: boolean
        responsibilities:
          type: string
        requirements:
          type: string
        conditions:
          type: string
        additional:
          type: string
          nullable: true
        experience:
          $ref: '#/components/schemas/experience'
        employment:
          $ref: '#/components/schemas/employment'
        lower_salary:
          type: number
          format: float
          nullable: true
        higher_salary:
          type: number
          format: float
          nullable: true
        image_id:
          type: integer
          nullable: true
      type: object
    detailVacancy:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/vacancy'
        -
          properties:
            specialization:
              $ref: '#/components/schemas/specialization'
          type: object
    HRPanelVacancy:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/vacancy'
        -
          properties:
            accountable:
              $ref: '#/components/schemas/user'
            image:
              $ref: '#/components/schemas/image'
            skills:
              type: array
              items:
                $ref: '#/components/schemas/skill'
            specialization:
              $ref: '#/components/schemas/specialization'
          type: object
    department:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        company:
          $ref: '#/components/schemas/company'
      type: object
    detailDepartment:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/department'
        -
          properties:
            company:
              $ref: '#/components/schemas/detailCompany'
          type: object
    detailCompany:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/company'
        -
          properties:
            building:
              $ref: '#/components/schemas/building'
          type: object
    company:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        description:
          type: string
        established_at:
          format: date
        nick_name:
          type: string
        image:
          $ref: '#/components/schemas/image'
        building_id:
          type: integer
          nullable: true
      type: object
    building:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        street:
          $ref: '#/components/schemas/street'
      type: object
    street:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        city:
          $ref: '#/components/schemas/detailCity'
      type: object
    skill:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    city:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        country_id:
          type: integer
          nullable: true
      type: object
    detailCity:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/city'
        -
          properties:
            country:
              $ref: '#/components/schemas/country'
          type: object
    country:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    image:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        image:
          type: string
        description:
          type: string
      type: object
    file:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        file:
          type: string
        mime:
          type: string
      type: object
    position:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    sources:
      type: string
      enum:
        - venari
        - habr
    post:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        comment_count:
          type: integer
        title:
          type: string
        text:
          type: string
        user:
          $ref: '#/components/schemas/detailUser'
        attributes:
          $ref: '#/components/schemas/attributes'
        likes:
          type: integer
        description:
          type: string
        source:
          $ref: '#/components/schemas/sources'
        user_name:
          type: string
        source_url:
          type: string
          format: url
      type: object
    detailPost:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/post'
        -
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/detailComment'
            images:
              type: array
              items:
                $ref: '#/components/schemas/image'
          type: object
    attributes: {  }
    user:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        email:
          type: string
        workingStatus_id:
          type: integer
        position_id:
          type: integer
        sex:
          type: boolean
        date_of_birth:
          format: date
        hrable_id:
          type: integer
          nullable: true
        hrable_type:
          type: string
      type: object
    previewChat:
      properties:
        name:
          type: string
        avatar:
          type: string
        body:
          type: string
        updated_at:
          type: string
          format: date
        type:
          $ref: '#/components/schemas/messageType'
        id:
          description: "'id может быть как чата, так и пользователя. Смотри type"
          type: integer
      type: object
    message:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        from_id:
          type: integer
        to_id:
          type: integer
        body:
          type: string
      type: object
    chatMessage:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        owner_id:
          type: integer
        chat_id:
          type: integer
        body:
          type: string
      type: object
    comment:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        text:
          type: string
        post_id:
          type: integer
        parent_id:
          description: 'id комментария, на который отвечаем'
          type: integer
          nullable: true
      type: object
    detailComment:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/comment'
        -
          properties:
            user:
              $ref: '#/components/schemas/detailUser'
            all_children:
              description: 'Массив ответов'
              type: array
              items:
                $ref: '#/components/schemas/detailComment'
          type: object
    detailUser:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/user'
        -
          properties:
            hrable:
              $ref: '#/components/schemas/HR'
          type: object
    HR:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        company_id:
          type: integer
      type: object
    detailHR:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/HR'
        -
          properties:
            company:
              $ref: '#/components/schemas/company'
          type: object
    chat:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
        description:
          type: string
        member_count:
          type: integer
        image:
          $ref: '#/components/schemas/image'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/tag'
      type: object
    tag:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    filter:
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/status'
        employments:
          type: array
          items:
            $ref: '#/components/schemas/employment'
        experiences:
          type: array
          items:
            $ref: '#/components/schemas/experience'
        formats:
          type: array
          items:
            $ref: '#/components/schemas/format'
        specializations:
          type: array
          items:
            $ref: '#/components/schemas/specialization'
      type: object
    status:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    employment:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    experience:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    format:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    specialization:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
  requestBodies:
    JoinChatRequest:
      content:
        application/json:
          schema:
            properties:
              chat_id:
                type: integer
            type: object
    LoginRequest:
      content:
        application/json:
          schema:
            properties:
              email:
                type: string
              password:
                type: string
            type: object
    RegisterRequest:
      content:
        application/json:
          schema:
            properties:
              email:
                type: string
              password:
                type: string
              login:
                type: string
            type: object
    SendCommentRequest:
      content:
        application/json:
          schema:
            properties:
              text:
                type: string
              post_id:
                type: integer
              parent_id:
                description: "id комментария, на который отвечаем. Необязательный\n * параметр"
                type: integer
            type: object
    SendMessageRequest:
      content:
        application/json:
          schema:
            properties:
              to_id:
                type: integer
              body:
                type: string
              type:
                type: string
              files:
                type: array
                items:
                  description: 'Массив файлов, без base64'
                  type: string
                  format: binary
              images:
                type: array
                items:
                  description: 'Массив изображений, без base64'
                  type: string
                  format: binary
            type: object
externalDocs:
  description: 'Как документировать этот код'
  url: 'https://zircote.github.io/swagger-php/guide/annotations.html'
