openapi: 3.0.0
info:
  title: 'Бекенд Venari'
  contact:
    email: kupryashin.stepan@yandex.ru
  version: 3.0.0
servers:
  -
    url: 'https://venari.backend.rfld.ru'
    description: 'Боевой сервер'
paths:
  /api/register:
    get:
      tags:
        - UserController
      summary: 'Метод регистрации'
      operationId: c491d067c8de8d0e0a4cc77bb7d7b363
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUser'
  /api/chats:
    get:
      tags:
        - ChatController
      summary: "Метод получения всех чатов пользователя. Отсортированы в обратном порядке по времени последнего сообщения\n(самый поздний - первый)"
      operationId: d819b7e183bc1e432868877421b66e93
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChats'
  '/api/chats/personal/{userID}':
    get:
      tags:
        - ChatController
      summary: 'Метод получения сообщений 1-1 по id пользователя'
      operationId: 0de9b4d1d6303bad5628f21455852e95
      parameters:
        -
          name: userID
          description: 'id пользователя'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMessagesByUserID'
  '/api/chats/group/{chatID}':
    get:
      tags:
        - ChatController
      summary: 'Метод получения сообщений чата по id чата'
      operationId: 1c707390fd2f758bf4928dd979a31940
      parameters:
        -
          name: chatID
          description: 'id чата'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChatMessagesByChatID'
  /api/messages/send-message:
    post:
      tags:
        - MessageController
      summary: 'Метод отправки сообщений'
      operationId: 4bd87a3a7705f49799ee91b062338872
      parameters:
        -
          name: ownerID
          description: 'id отправителя. Это id пользователя'
        -
          name: toID
          description: 'id получателя. Это ЛИБО id пользователя ЛИБО id чата'
        -
          name: body
          description: 'текст сообщения'
        -
          name: type
          description: 'Тип сообщения, которое должно быть отправлено. ЛИБО message, для 1-1, ЛИБО chatMessage, если это сообщение в чат'
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendMessage'
  /api/posts:
    get:
      tags:
        - PostController
      summary: 'Метод получения всех постов'
      operationId: 73071356cdd139f116db7436d9da6497
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPosts'
  '/api/posts/{id}':
    get:
      tags:
        - PostController
      summary: 'Метод получения поста по его id (подробная страница)'
      operationId: 575616ce88c4119bb7a6c703f83cb6ee
      parameters:
        -
          name: id
          description: 'id поста'
          required: true
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPostByID'
  /api/vacancies:
    get:
      tags:
        - VacancyController
      summary: 'Метод получения всех вакансий'
      operationId: a75f8d08e0e49f2a76fffdbf7a64b395
      responses:
        '200':
          description: 'Ответ при успешном выполнении запроса'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVacancies'
components:
  schemas:
    messageType:
      type: string
      enum:
        - message
        - chatMessage
    registerUser:
      properties:
        success:
          type: boolean
          example: 'true'
        user:
          $ref: '#/components/schemas/user'
        access_token:
          type: string
      type: object
    getChats:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/previewChat'
      type: object
    getMessagesByUserID:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/message'
      type: object
    getChatMessagesByChatID:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/chatMessage'
      type: object
    sendMessage:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/message'
      type: object
    getPosts:
      properties:
        success:
          type: boolean
          example: 'true'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/post'
      type: object
    getPostByID:
      properties:
        success:
          type: boolean
          example: 'true'
        post:
          $ref: '#/components/schemas/post'
      type: object
    getVacancies:
      properties:
        success:
          type: boolean
          example: 'true'
        response:
          type: array
          items:
            $ref: '#/components/schemas/vacancy'
      type: object
    vacancy:
      properties:
        id:
          type: integer
        department_id:
          type: integer
        position_id:
          type: integer
        description:
          type: string
        salary:
          type: string
        is_online:
          type: boolean
        has_social_support:
          type: boolean
        schedule:
          type: string
        is_flexible:
          type: boolean
        link_to_test_document:
          type: string
        is_fulltime:
          type: boolean
        city_id:
          type: integer
        is_closed:
          type: boolean
        is_outer:
          type: boolean
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    position:
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    sources:
      type: string
      enum:
        - venari
        - habr
    post:
      properties:
        id:
          type: integer
        title:
          type: string
        text:
          type: string
        user_id:
          type: integer
        attributes:
          $ref: '#/components/schemas/attributes'
        likes:
          type: integer
        description:
          type: string
        source:
          $ref: '#/components/schemas/sources'
        user_name:
          type: string
        source_url:
          type: string
          format: url
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    attributes: {  }
    user: {  }
    previewChat:
      properties:
        name:
          type: string
        avatar:
          type: string
        body:
          type: string
        updated_at:
          type: string
          format: date
        type:
          $ref: '#/components/schemas/messageType'
        id:
          description: "'id может быть как чата, так и пользователя. Смотри type"
          type: integer
      type: object
    message:
      properties:
        id:
          type: integer
        from_id:
          type: integer
        to_id:
          type: integer
        body:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
    chatMessage:
      properties:
        id:
          type: integer
        owner_id:
          type: integer
        chat_id:
          type: integer
        body:
          type: string
        created_at:
          format: date
        updated_at:
          format: date
      type: object
externalDocs:
  description: 'Как документировать этот код'
  url: 'https://zircote.github.io/swagger-php/guide/annotations.html'
